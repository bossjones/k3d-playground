{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Cluster \u00b6 This repository is my home Kubernetes cluster in a declarative state. ArgoCD watches my repo and makes the changes to my cluster based on the YAML manifests. Feel free to open a Github issue if you have any questions. Cluster setup \u00b6 My cluster is k3d provisioned overtop either MacOS with Docker Desktop or Proxmox VM running Ubuntu 22.04 This is a work in progress. Cluster components \u00b6 metallb : For internal cluster networking using BGP. cert-manager : Configured to create TLS certs for all ingress services automatically using LetsEncrypt. ingress-nginx : My preferred ingress controller to expose traffic to pods over DNS. vault : Hashicorp Vault to Manage Secrets & Protect Sensitive Data and internal self-signed TLS certs Automate all the things! \u00b6 Github Actions for checking code formatting Rancher System Upgrade Controller to apply updates to k3s Renovate with the help of the k8s-at-home/renovate-helm-releases Github action keeps my application charts and container images up-to-date Tools \u00b6 Tool Purpose k9s Kubernetes CLI To Manage Your Cluster pre-commit Enforce code consistency and verifies no secrets are pushed stern Tail logs in Kubernetes Thanks \u00b6 A lot of inspiration for this repo came from billimek/git-ops and the people that have shared their clusters over at awesome-home-kubernetes","title":"Introduction"},{"location":"#home-cluster","text":"This repository is my home Kubernetes cluster in a declarative state. ArgoCD watches my repo and makes the changes to my cluster based on the YAML manifests. Feel free to open a Github issue if you have any questions.","title":"Home Cluster"},{"location":"#cluster-setup","text":"My cluster is k3d provisioned overtop either MacOS with Docker Desktop or Proxmox VM running Ubuntu 22.04 This is a work in progress.","title":"Cluster setup"},{"location":"#cluster-components","text":"metallb : For internal cluster networking using BGP. cert-manager : Configured to create TLS certs for all ingress services automatically using LetsEncrypt. ingress-nginx : My preferred ingress controller to expose traffic to pods over DNS. vault : Hashicorp Vault to Manage Secrets & Protect Sensitive Data and internal self-signed TLS certs","title":"Cluster components"},{"location":"#automate-all-the-things","text":"Github Actions for checking code formatting Rancher System Upgrade Controller to apply updates to k3s Renovate with the help of the k8s-at-home/renovate-helm-releases Github action keeps my application charts and container images up-to-date","title":"Automate all the things!"},{"location":"#tools","text":"Tool Purpose k9s Kubernetes CLI To Manage Your Cluster pre-commit Enforce code consistency and verifies no secrets are pushed stern Tail logs in Kubernetes","title":"Tools"},{"location":"#thanks","text":"A lot of inspiration for this repo came from billimek/git-ops and the people that have shared their clusters over at awesome-home-kubernetes","title":"Thanks"},{"location":"installation/bootstrap-applications/","text":"Bootstrapping \u00b6 Installation (one-time actions) \u00b6 Once a cluster is in-place, checkout the code on the master node and then run bootstrap-cluster.sh cd setup && ./bootstrap-cluster.sh This script does several things: Installs ArgoCD Init the ArgoCD to automate deployments Bootstraps the vault-secret-operator with the auto-unwrap token Bootstraps cert-manager with letsencrypt information Bootstraps vault (see bootstrap-vault.sh for more detail) Initializes vault if it has not already been initialized Unseals vault Configures vault to accept requests from vault-secrets-operator Writes all secrets (held locally in the .env file) to vault for vault-secrets-operator to act on Bootstraps vault cert manager Cluster maintenance \u00b6 After initial bootstrapping, it will be necessary to run scripts to apply manual changes that can't be natively handled via ArgoCD. This is for yaml files that need envsubst prior to application to the cluster. This is also for updates to values stored in vault . .env file \u00b6 There are references to the .env file in the below scripts. This file is automatically sourced in order to populate secrets and sensitive information used in the scripts at runtime. This file is also prevented from commits via .gitignore . A sample .env.sample file is provided as reference. To use this, cp .env.sample .env and make the necessary modifications for the secrets for your particular configuration. Objects \u00b6 To apply necessary changes to kubernetes native objects, run bootstrap-objects.sh : cd setup && ./bootstrap-objects.sh Vault updates \u00b6 To apply new additions or updates to vault, run bootstrap-vault.sh : cd setup && ./bootstrap-vault.sh","title":"Bootstrap Applications"},{"location":"installation/bootstrap-applications/#bootstrapping","text":"","title":"Bootstrapping"},{"location":"installation/bootstrap-applications/#installation-one-time-actions","text":"Once a cluster is in-place, checkout the code on the master node and then run bootstrap-cluster.sh cd setup && ./bootstrap-cluster.sh This script does several things: Installs ArgoCD Init the ArgoCD to automate deployments Bootstraps the vault-secret-operator with the auto-unwrap token Bootstraps cert-manager with letsencrypt information Bootstraps vault (see bootstrap-vault.sh for more detail) Initializes vault if it has not already been initialized Unseals vault Configures vault to accept requests from vault-secrets-operator Writes all secrets (held locally in the .env file) to vault for vault-secrets-operator to act on Bootstraps vault cert manager","title":"Installation (one-time actions)"},{"location":"installation/bootstrap-applications/#cluster-maintenance","text":"After initial bootstrapping, it will be necessary to run scripts to apply manual changes that can't be natively handled via ArgoCD. This is for yaml files that need envsubst prior to application to the cluster. This is also for updates to values stored in vault .","title":"Cluster maintenance"},{"location":"installation/bootstrap-applications/#env-file","text":"There are references to the .env file in the below scripts. This file is automatically sourced in order to populate secrets and sensitive information used in the scripts at runtime. This file is also prevented from commits via .gitignore . A sample .env.sample file is provided as reference. To use this, cp .env.sample .env and make the necessary modifications for the secrets for your particular configuration.","title":".env file"},{"location":"installation/bootstrap-applications/#objects","text":"To apply necessary changes to kubernetes native objects, run bootstrap-objects.sh : cd setup && ./bootstrap-objects.sh","title":"Objects"},{"location":"installation/bootstrap-applications/#vault-updates","text":"To apply new additions or updates to vault, run bootstrap-vault.sh : cd setup && ./bootstrap-vault.sh","title":"Vault updates"},{"location":"installation/installing-kubernetes/","text":"Installing Kubernetes \u00b6 Cluster Init \u00b6 Download the script to init the cluster on first node wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupMainNode.sh \\ -O setupMainNode.sh && chmod +x setupMainNode.sh Create cluster and get token to setup the remaining nodes ./setupMainNode.sh Additional master nodes for HA \u00b6 Download the script on HA nodes wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupHANode.sh \\ -O setupHANode.sh && chmod +x setupHANode.sh Use the token from the First master node to join the cluster ./setupHANode.sh <Token> Add worker nodes \u00b6 Download the script wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupWorkerNode.sh \\ -O setupWorkerNode.sh && chmod +x setupWorkerNode.sh Use the token from the First master node to join the cluster ./setupWorkerNode.sh <Token> Add worker nodes (arm) \u00b6 Download the script wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupWorkerNodeArm.sh \\ -O setupWorkerNodeArm.sh && chmod +x setupWorkerNodeArm.sh Use the token from the First master node to join the cluster ./setupWorkerNodeArm.sh <Token> Add worker nodes (arm64) \u00b6 Download the script wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupWorkerNodeArm64.sh \\ -O setupWorkerNodeArm64.sh && chmod +x setupWorkerNodeArm64.sh Use the token from the First master node to join the cluster ./setupWorkerNodeArm64.sh <Token>","title":"Installing Kubernetes"},{"location":"installation/installing-kubernetes/#installing-kubernetes","text":"","title":"Installing Kubernetes"},{"location":"installation/installing-kubernetes/#cluster-init","text":"Download the script to init the cluster on first node wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupMainNode.sh \\ -O setupMainNode.sh && chmod +x setupMainNode.sh Create cluster and get token to setup the remaining nodes ./setupMainNode.sh","title":"Cluster Init"},{"location":"installation/installing-kubernetes/#additional-master-nodes-for-ha","text":"Download the script on HA nodes wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupHANode.sh \\ -O setupHANode.sh && chmod +x setupHANode.sh Use the token from the First master node to join the cluster ./setupHANode.sh <Token>","title":"Additional master nodes for HA"},{"location":"installation/installing-kubernetes/#add-worker-nodes","text":"Download the script wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupWorkerNode.sh \\ -O setupWorkerNode.sh && chmod +x setupWorkerNode.sh Use the token from the First master node to join the cluster ./setupWorkerNode.sh <Token>","title":"Add worker nodes"},{"location":"installation/installing-kubernetes/#add-worker-nodes-arm","text":"Download the script wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupWorkerNodeArm.sh \\ -O setupWorkerNodeArm.sh && chmod +x setupWorkerNodeArm.sh Use the token from the First master node to join the cluster ./setupWorkerNodeArm.sh <Token>","title":"Add worker nodes (arm)"},{"location":"installation/installing-kubernetes/#add-worker-nodes-arm64","text":"Download the script wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setupWorkerNodeArm64.sh \\ -O setupWorkerNodeArm64.sh && chmod +x setupWorkerNodeArm64.sh Use the token from the First master node to join the cluster ./setupWorkerNodeArm64.sh <Token>","title":"Add worker nodes (arm64)"},{"location":"installation/preparing-nodes/","text":"Preparing Nodes \u00b6 Install Ubuntu \u00b6 Download Ubuntu Server 21.04 ISO and install Ubuntu on each node. VLAN Config Physical devices (amd64) Select the required VLAN (100) during the server setup Raspberry Pi (arm) For raspberry pi/ARM edit the file sudo vi /etc/netplan/50-cloud-init.yaml Update the yaml file with the content # /etc/netplan/50-cloud-init.yaml network : ethernets : eth0 : dhcp4 : true vlans : vlan100 : id : 100 link : eth0 dhcp4 : true version : 2 Validate the network settings sudo netplan try Save the network settings sudo netplan apply Generate SSH Key on host machine \u00b6 ssh-keygen -t ed25519 -C \"rogerrum@gmail.com\" Copy over SSH key from the host machine \u00b6 ssh-copy-id -i ~/.ssh/id_rsa.pub rsr@192.168.50.100 Ubuntu use all partition space \u00b6 lsblk sudo parted /dev/sda print sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv sudo resize2fs /dev/ubuntu-vg/ubuntu-lv Prepare Disks for Longhorn \u00b6 Prepare/mount the additional disks for Longhorn wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setup-disks.sh \\ -O setup-disks.sh && chmod +x setup-disks.sh run setup-disks.sh for each additional disk ./setup-disks.sh sdb storage","title":"Preparing Nodes"},{"location":"installation/preparing-nodes/#preparing-nodes","text":"","title":"Preparing Nodes"},{"location":"installation/preparing-nodes/#install-ubuntu","text":"Download Ubuntu Server 21.04 ISO and install Ubuntu on each node. VLAN Config Physical devices (amd64) Select the required VLAN (100) during the server setup Raspberry Pi (arm) For raspberry pi/ARM edit the file sudo vi /etc/netplan/50-cloud-init.yaml Update the yaml file with the content # /etc/netplan/50-cloud-init.yaml network : ethernets : eth0 : dhcp4 : true vlans : vlan100 : id : 100 link : eth0 dhcp4 : true version : 2 Validate the network settings sudo netplan try Save the network settings sudo netplan apply","title":"Install Ubuntu"},{"location":"installation/preparing-nodes/#generate-ssh-key-on-host-machine","text":"ssh-keygen -t ed25519 -C \"rogerrum@gmail.com\"","title":"Generate SSH Key on host machine"},{"location":"installation/preparing-nodes/#copy-over-ssh-key-from-the-host-machine","text":"ssh-copy-id -i ~/.ssh/id_rsa.pub rsr@192.168.50.100","title":"Copy over SSH key from the host machine"},{"location":"installation/preparing-nodes/#ubuntu-use-all-partition-space","text":"lsblk sudo parted /dev/sda print sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv sudo resize2fs /dev/ubuntu-vg/ubuntu-lv","title":"Ubuntu use all partition space"},{"location":"installation/preparing-nodes/#prepare-disks-for-longhorn","text":"Prepare/mount the additional disks for Longhorn wget https://raw.githubusercontent.com/rogerrum/homelab-infrastructure/main/k3s/ha/setup-disks.sh \\ -O setup-disks.sh && chmod +x setup-disks.sh run setup-disks.sh for each additional disk ./setup-disks.sh sdb storage","title":"Prepare Disks for Longhorn"}]}