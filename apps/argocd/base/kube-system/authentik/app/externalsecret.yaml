---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik
spec:
  # SOURCE: https://external-secrets.io/latest/api/externalsecret/
  # Optional, SecretStoreRef defines the default SecretStore to use when fetching the secret data.
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  # the target describes the secret that shall be created
  # there can only be one target per ExternalSecret
  target:
    # The secret name of the resource
    # Defaults to .metadata.name of the ExternalSecret
    # It is immutable
    name: authentik-secret

    # Enum with values: 'Owner', 'Merge', or 'None'
    # Default value of 'Owner'
    # Owner creates the secret and sets .metadata.ownerReferences of the resource
    # Merge does not create the secret, but merges in the data fields to the secret
    # None does not create a secret (future use with injector)
    creationPolicy: Owner

    # Specify a blueprint for the resulting Kind=Secret
    template:
      engineVersion: v2
      # Use inline templates to construct your desired config file that contains your secret
      data:
        AUTHENTIK_SECRET_KEY: "{{ .authentik_secret_key }}"
        AUTHENTIK_EMAIL__HOST: "{{ .authentik_email_host }}"
        AUTHENTIK_EMAIL__USERNAME: "{{ .authentik_email_username }}"
        AUTHENTIK_EMAIL__PASSWORD: "{{ .mailgun_authentik_smtp_password }}"
        AUTHENTIK_EMAIL__FROM: "{{ .authentik_email_from }}"

  # Used to fetch all properties from the Provider key
  # If multiple dataFrom are specified, secrets are merged in the specified order
  # Can be defined using sourceRef.generatorRef or extract / find
  # Both use cases are exemplified below
  dataFrom:
    - extract:
        key: Authentik
      rewrite:
        - regexp:
            source: "(.*)"
            target: "authentik_$1"
    # - extract:
    #     key: mailgun
    #   rewrite:
    #     - regexp:
    #         source: "(.*)"
    #         target: "mailgun_$1"
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: authentik-db
spec:
  refreshInterval: 1m
  secretStoreRef:
    # name: crunchy-pgo-secrets
    name: 1password
    kind: ClusterSecretStore
  target:
    name: authentik-db-secret
    template:
      type: Opaque
      data:
        # AUTHENTIK_POSTGRESQL__NAME: "{{ .dbname }}"
        # AUTHENTIK_POSTGRESQL__HOST: '{{ index . "pgbouncer-host" }}'
        # AUTHENTIK_POSTGRESQL__USER: "{{ .user }}"
        # AUTHENTIK_POSTGRESQL__PASSWORD: "{{ .password }}"
        # AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: "true"
        # AUTHENTIK_POSTGRESQL__SSLMODE: "require"
        AUTHENTIK_POSTGRESQL__NAME: "authentik"
        AUTHENTIK_POSTGRESQL__HOST: 'authentik-postgresql'
        AUTHENTIK_POSTGRESQL__USER: "authentik"
        AUTHENTIK_POSTGRESQL__PASSWORD: "8edF6sRQjx"
        AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: "false"
        # AUTHENTIK_POSTGRESQL__SSLMODE: "require"
        AUTHENTIK_POSTGRESQL__SSLMODE: "disable"

        ##################################################################
        # https://github.com/goauthentik/authentik/issues/6712
        # AUTHENTIK_POSTGRESQL__HOST                                    = tostring(module.rds_instance.instance_address)
        # AUTHENTIK_POSTGRESQL__NAME                                    = "authentik"
        # AUTHENTIK_POSTGRESQL__PORT                                    = 5432
        # AUTHENTIK_POSTGRESQL__USER                                    = "authentikrds"
        # AUTHENTIK_POSTGRESQL__PASSWORD                                = tostring(random_password.rds_password.result)
        # AUTHENTIK_POSTGRESQL__SSLMODE                                 = "verify-ca"
        # AUTHENTIK_POSTGRESQL__SSLROOTCERT                             = "/certs/aws_rds/cacerts.pem"
        # AUTHENTIK_SECRET_KEY                                          = tostring(random_password.authentik_coockie_signin.result)
        # AUTHENTIK_AUTOSCALING__SERVER__ENABLED                        = true
        # AUTHENTIK_AUTOSCALING__SERVER__MAXREPLICAS                    = 3
        # AUTHENTIK_AUTOSCALING__SERVER__MINREPLICAS                    = 1
        # AUTHENTIK_AUTOSCALING__SERVER__TARGETCPUUTILIZATIONPERCENTAGE = 50
        # AUTHENTIK_AUTOSCALING__WORKER__ENABLED                        = true
        # AUTHENTIK_AUTOSCALING__WORKER__MAXREPLICAS                    = 3
        # AUTHENTIK_AUTOSCALING__WORKER__MINREPLICAS                    = 1
        # AUTHENTIK_AUTOSCALING__WORKER__TARGETCPUUTILIZATIONPERCENTAGE = 80
        # AUTHENTIK_EMAIL__PORT                                         = 587
        # AUTHENTIK_EMAIL__TIMEOUT                                      = 30
        # AUTHENTIK_EMAIL__USE_SSL                                      = false
        # AUTHENTIK_EMAIL__USE_TLS                                      = false
        # AUTHENTIK_ERROR_REPORTING                                     = false
        # AUTHENTIK_DISABLE_STARTUP_ANALYTICS                           = true
        # AUTHENTIK_GEOIP                                               = "/geoip/GeoLite2-City.mmdb"
        # AUTHENTIK_LOG_LEVEL                                           = "debug"
        # AUTHENTIK_OUTPOSTS__CONTAINER_IMAGE_BASE                      = "ghcr.io/goauthentik/%(type)s:%(version)s"
        # AUTHENTIK_REDIS__HOST                                         = "authentik-redis-master"
        # AUTHENTIK_DEFAULT_USER_CHANGE_NAME                            = false
        # AUTHENTIK_DEFAULT_USER_CHANGE_EMAIL                           = false
        # AUTHENTIK_DEFAULT_USER_CHANGE_USERNAME                        = false
        # AUTHENTIK_GDPR_COMPLIANCE                                     = true
        # AUTHENTIK_DEFAULT_TOKEN_LENGTH                                = 60

        # AUTHENTIK_BOOTSTRAP_PASSWORD = tostring(random_password.authentik_bootstrap_admin_password.result)
        # AUTHENTIK_BOOTSTRAP_TOKEN    = tostring(random_password.authentik_bootstrap_admin_token.result)
        # AUTHENTIK_BOOTSTRAP_EMAIL    = "email@host.domain"

        # AUTHENTIK_FREEIPA_SYNC_USER_NAME     = "uid=authentik,cn=users,cn=accounts,dc=host,dc=domain"
        # AUTHENTIK_FREEIPA_SYNC_USER_PASSWORD = tostring(random_password.authentik_freeipa_sync_user_password.result)
  dataFrom:
    - extract:
        key: postgres-pguser-authentik
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: &name authentik-db-secret
  namespace: kube-system
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    # name: authentik
    name: 1password
  target:
    name: *name
    creationPolicy: Owner
    template:
      engineVersion: v2

      # SOURCE: https://goauthentik.io/docs/installation/configuration
      # PostgreSQL Settings
      #   AUTHENTIK_POSTGRESQL__HOST: Hostname of your PostgreSQL Server
      #   AUTHENTIK_POSTGRESQL__NAME: Database name
      #   AUTHENTIK_POSTGRESQL__USER: Database user
      #   AUTHENTIK_POSTGRESQL__PORT: Database port, defaults to 5432
      #   AUTHENTIK_POSTGRESQL__PASSWORD: Database password, defaults to the environment variable POSTGRES_PASSWORD
      #   AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: Adjust configuration to support connection to PgBouncer
      #   AUTHENTIK_POSTGRESQL__USE_PGPOOL: Adjust configuration to support connection to Pgpool
      #   AUTHENTIK_POSTGRESQL__SSLMODE: Strictness of ssl verification. Defaults to verify-ca
      #   AUTHENTIK_POSTGRESQL__SSLROOTCERT: CA root for server ssl verification
      #   AUTHENTIK_POSTGRESQL__SSLCERT: Path to x509 client certificate to authenticate to server
      #   AUTHENTIK_POSTGRESQL__SSLKEY: Path to private key of SSLCERT certificate
      data:
        AUTHENTIK_EMAIL__FROM: "{{ .authentik_email_from }}"
        AUTHENTIK_EMAIL__HOST: "{{ .authentik_email_host }}"
        AUTHENTIK_EMAIL__PASSWORD: "{{ .mailgun_authentik_smtp_password }}"
        AUTHENTIK_EMAIL__PORT: "465"
        AUTHENTIK_EMAIL__USE_TLS: "true"
        AUTHENTIK_EMAIL__USERNAME: "{{ .authentik_email_from }}"
        # DISABLED: probably need to re-enable # AUTHENTIK_POSTGRESQL__PASSWORD: "{{ .INIT_POSTGRES_PASS }}"
        # DISABLED: probably need to re-enable # AUTHENTIK_POSTGRESQL__USER: "{{ .INIT_POSTGRES_USER }}"
        # DISABLED: probably need to re-enable # AUTHENTIK_POSTGRESQL__HOST: "{{ .INIT_POSTGRES_HOST }}"
        # DISABLED: probably need to re-enable # AUTHENTIK_POSTGRESQL__NAME: "{{ .INIT_POSTGRES_DBNAME }}"
        # DISABLED: probably need to re-enable # AUTHENTIK_SECRET_KEY: "{{ .AUTHENTIK_SECRET_KEY }}"
        # DISABLED: probably need to re-enable # INIT_POSTGRES_DBNAME: "{{ .INIT_POSTGRES_DBNAME }}"
        # DISABLED: probably need to re-enable # INIT_POSTGRES_HOST: "{{ .INIT_POSTGRES_HOST }}"
        # DISABLED: probably need to re-enable # INIT_POSTGRES_PASS: "{{ .INIT_POSTGRES_PASS }}"
        # DISABLED: probably need to re-enable # INIT_POSTGRES_SUPER_PASS: "{{ .INIT_POSTGRES_SUPER_PASS }}"
        # DISABLED: probably need to re-enable # INIT_POSTGRES_USER: "{{ .INIT_POSTGRES_USER }}"
        AUTHENTIK_POSTGRESQL__NAME: "authentik"
        AUTHENTIK_POSTGRESQL__HOST: 'authentik-postgresql'
        AUTHENTIK_POSTGRESQL__USER: "authentik"
        AUTHENTIK_POSTGRESQL__PASSWORD: "8edF6sRQjx"
        AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: "false"
        AUTHENTIK_POSTGRESQL__SSLMODE: "disable"
        # SOURCE: https://github.com/billimek/k8s-gitops/blob/8f5ff27df2673dbf442c3eee429f51b3b9b15256/default/invidious/invidious.yaml
        INIT_POSTGRES_DBNAME: "authentik"
        INIT_POSTGRES_HOST: "authentik"
        INIT_POSTGRES_PASS: "8edF6sRQjx"
        INIT_POSTGRES_SUPER_PASS: "8edF6sRQjx"
        INIT_POSTGRES_USER: "authentik"
  dataFrom:
    - find:
        name:
          regexp: .*
