apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: demo
servers: 1
agents: 2
kubeAPI:
  host: "k8s.localhost"
  # hostIP: "127.0.0.1"
  hostIP: "0.0.0.0"
  hostPort: "6445"
image: rancher/k3s:v1.27.4-k3s1
network: demo-net
ports:
- port: 80:80
  nodeFilters:
  - loadbalancer
- port: 443:443
  nodeFilters:
  - loadbalancer
# - port: 8080:8080
#   nodeFilters:
#   - loadbalancer
registries:
  create:
    name: registry.localhost
    host: "0.0.0.0"
    hostPort: "5002"
  config: |
    mirrors:
      "registry.localhost":
        endpoint:
          - http://registry.local.gd:5002

volumes:
- volume: "${PWD}/storage:/var/lib/rancher/k3s/storage"
  nodeFilters:
  - server:0
  - agent:*

  # --volume {{PWD}}:/var/lib/rancer/k3s/server/manifests/traefik-config.yaml@all \
  # --volume /tmp/k3dvol:/var/lib/rancher/k3s/storage@all \
hostAliases:
- ip: 127.0.0.1
  hostnames:
  - k8s.localhost
  - app.k8s.localhost
  - example.k8s.localhost
  - argocd.k8s.localhost
  - postgres.k8s.localhost
  - dbs.k8s.localhost
options:
  k3d:
    wait: true
    timeout: "360s"
    loadbalancer:
      configOverrides:
      - settings.workerConnections=2048
  k3s:
    extraArgs:
    - arg: "--disable-network-policy"
      nodeFilters:
        - server:*
    - arg: "--debug"
      nodeFilters:
        - server:*
        - agent:*
    - arg: --disable=traefik
      nodeFilters:
      - server:*
    - arg: --tls-san=localhost,registry.local.gd,127.0.0.1,registry.localhost,k8s.localhost,whoami.k8s.localhost
      nodeFilters:
      - server:*
    - arg: --kube-proxy-arg=metrics-bind-address=0.0.0.0
      nodeFilters:
      - server:*
      - agent:*
    - arg: --kube-scheduler-arg=bind-address=0.0.0.0
      nodeFilters:
      - server:*
    - arg: --kubelet-arg=node-status-update-frequency=4s
      nodeFilters:
      - server:*
    - arg: --kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%
      nodeFilters:
      - agent:*
    - arg: --kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%
      nodeFilters:
      - agent:*
    - arg: --kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%
      nodeFilters:
      - server:*
    - arg: --kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%
      nodeFilters:
      - server:*

  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true

  runtime: # runtime (docker) specific options
    ulimits:
      - name: nofile
        soft: 26677
        hard: 26677
      - name: nproc
        soft: 26677
        hard: 26677
      - name: core
        soft: 26677
        hard: 26677
