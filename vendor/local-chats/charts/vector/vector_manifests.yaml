---
# Source: vector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

automountServiceAccountToken: true
---
# Source: vector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

data:
  vector.yaml: |
    api:
      address: 127.0.0.1:8686
      enabled: true
      playground: false
    data_dir: /var/lib/vector
    sinks:
      loki:
        auth:
          password: ""
          strategy: basic
          user: ""
        encoding:
          codec: json
          timestamp_format: rfc3339
        endpoint: http://loki-loki-distributed-gateway.monitoring.svc.cluster.local
        healthcheck:
          enabled: true
        inputs:
        - parse_k8s_events
        - kubernetes_logs
        labels:
          application: vector
          cluster: k3d
          forwarder: vector
          host: k3d-playground
          job: vector
        out_of_order_action: accept
        remove_label_fields: false
        remove_timestamp: true
        request:
          concurrency: adaptive
          rate_limit_duration_secs: 1
          rate_limit_num: 10
        tenant_id: docker
        type: loki
      prom_exporter:
        address: 0.0.0.0:9090
        inputs:
        - host_metrics
        - internal_metrics
        type: prometheus_exporter
      stdout:
        encoding:
          codec: json
        inputs:
        - kubernetes_logs
        type: console
    sources:
      host_metrics:
        filesystem:
          devices:
            excludes:
            - binfmt_misc
          filesystems:
            excludes:
            - binfmt_misc
          mountPoints:
            excludes:
            - '*/proc/sys/fs/binfmt_misc'
        type: host_metrics
      internal_metrics:
        type: internal_metrics
      kubernetes_events:
        extra_label_selector: app.kubernetes.io/name=k8s-event-logger
        type: kubernetes_logs
      kubernetes_logs:
        type: kubernetes_logs
    transforms:
      parse_k8s_events:
        inputs:
        - kubernetes_events
        source: |
          # Remove useless fields. In this case, we are only interested
          # about the output of the application, we don't want to monitor
          # the pod itself
                del(.kubernetes)
                parsed, err = parse_json(string!(.message))
                if err != null {
                  .log_parsing_error = err
                } else {
                  . |= object!(parsed)
                }
        type: remap
---
# Source: vector/templates/rbac.yaml
# Permissions to use Kubernetes API.
# Requires that RBAC authorization is enabled.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
    verbs:
      - list
      - watch
---
# Source: vector/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vector
subjects:
  - kind: ServiceAccount
    name: vector
    namespace: monitoring
---
# Source: vector/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: vector-headless
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

  annotations:
spec:
  clusterIP: None
  ports:
    - name: http
      port: 9090
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
  type: ClusterIP
---
# Source: vector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

  annotations:
spec:
  ports:
    - name: http
      port: 9090
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
  type: ClusterIP
---
# Source: vector/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  labels:
    helm.sh/chart: vector-0.30.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: vector
    app.kubernetes.io/component: Agent
    app.kubernetes.io/version: "0.35.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm

  annotations:
    {}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vector
      app.kubernetes.io/instance: vector
      app.kubernetes.io/component: Agent
  minReadySeconds: 0
  template:
    metadata:
      annotations:
        checksum/config: 6878498c4f627a826934cc3d81db0306706921a0567019bf021c3d6747888406
      labels:
        app.kubernetes.io/name: vector
        app.kubernetes.io/instance: vector
        app.kubernetes.io/component: Agent
        vector.dev/exclude: "true"
    spec:
      serviceAccountName: vector
      dnsPolicy: ClusterFirst
      containers:
        - name: vector
          image: "timberio/vector:0.35.0-distroless-libc"
          imagePullPolicy: IfNotPresent
          args:
            - --config-dir
            - /etc/vector/
          env:
            - name: VECTOR_SELF_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: VECTOR_SELF_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VECTOR_SELF_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROCFS_ROOT
              value: "/host/proc"
            - name: SYSFS_ROOT
              value: "/host/sys"
            - name: VECTOR_LOG
              value: "info"
          ports:
            - name: api
              containerPort: 8686
              protocol: TCP
            - name: prom-exporter
              containerPort: 9090
              protocol: TCP
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 300m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: "/var/lib/vector"
            - name: config
              mountPath: "/etc/vector/"
              readOnly: true
            - mountPath: /var/log/
              name: var-log
              readOnly: true
            - mountPath: /var/lib
              name: var-lib
              readOnly: true
            - mountPath: /host/proc
              name: procfs
              readOnly: true
            - mountPath: /host/sys
              name: sysfs
              readOnly: true
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          projected:
            sources:
              - configMap:
                  name: vector
        - name: data
          hostPath:
            path: "/var/lib/vector"
        - hostPath:
            path: /var/log/
          name: var-log
        - hostPath:
            path: /var/lib/
          name: var-lib
        - hostPath:
            path: /proc
          name: procfs
        - hostPath:
            path: /sys
          name: sysfs
